#!/usr/bin/env python3
"""
Test Bot System v·ªõi Bot Files th·ª±c t·∫ø
H∆∞·ªõng d·∫´n c√°ch test h·ªá th·ªëng bot ƒë√£ ƒë∆∞·ª£c h·ªó tr·ª£
"""

import requests
import json
import pandas as pd
from datetime import datetime

# API Configuration
BASE_URL = "http://localhost:8000"
API_KEY = "test_marketplace_api_key_12345"

def test_bot_api(bot_id: int):
    """Test bot API ƒë·ªÉ l·∫•y th√¥ng tin bot"""
    print(f"\nüìã Testing Bot API for Bot ID {bot_id}")
    
    try:
        response = requests.get(f"{BASE_URL}/bots/{bot_id}")
        if response.status_code == 200:
            bot_data = response.json()
            print(f"‚úÖ Bot Name: {bot_data['name']}")
            print(f"   Description: {bot_data['description']}")
            print(f"   Code Path: {bot_data.get('code_path', 'Not set')}")
            print(f"   Bot Type: {bot_data.get('bot_type', 'Not set')}")
            print(f"   Subscribers: {bot_data['total_subscribers']}")
            return bot_data
        else:
            print(f"‚ùå Failed to get bot info: {response.status_code}")
            return None
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return None

def test_bot_file_loading():
    """Test loading bot files tr·ª±c ti·∫øp"""
    print(f"\nüîß Testing Bot File Loading")
    
    try:
        # Test import Advanced ML Bot
        import sys
        import os
        sys.path.insert(0, os.path.join(os.getcwd(), 'bot_files'))
        
        from advanced_ml_bot import AdvancedMLBot
        from simple_sma_bot import SimpleSMABot
        
        # Test ML Bot
        ml_config = {
            'exchange_type': 'BINANCE',
            'trading_pair': 'BTC/USDT',
            'lookback_period': 50,
            'prediction_threshold': 0.6
        }
        api_keys = {'api_key': 'test', 'api_secret': 'test'}
        
        ml_bot = AdvancedMLBot(ml_config, api_keys)
        print(f"‚úÖ ML Bot loaded: {ml_bot.bot_name} v{ml_bot.version}")
        
        # Test SMA Bot
        sma_config = {
            'exchange_type': 'BINANCE', 
            'trading_pair': 'ETH/USDT',
            'ma_short_period': 10,
            'ma_long_period': 20
        }
        
        sma_bot = SimpleSMABot(sma_config, api_keys)
        print(f"‚úÖ SMA Bot loaded: {sma_bot.bot_name} v{sma_bot.version}")
        
        # Test execute_algorithm v·ªõi sample data
        sample_data = pd.DataFrame({
            'open': [100, 101, 102, 103, 104],
            'high': [102, 103, 104, 105, 106], 
            'low': [99, 100, 101, 102, 103],
            'close': [101, 102, 103, 104, 105],
            'volume': [1000, 1100, 1200, 1300, 1400]
        })
        
        # Test ML Bot execution
        try:
            ml_action = ml_bot.execute_algorithm(sample_data, '1h')
            print(f"‚úÖ ML Bot Action: {ml_action}")
        except Exception as e:
            print(f"‚ö†Ô∏è ML Bot execution (expected with minimal data): {e}")
        
        # Test SMA Bot execution  
        try:
            sma_action = sma_bot.execute_algorithm(sample_data, '1h')
            print(f"‚úÖ SMA Bot Action: {sma_action}")
        except Exception as e:
            print(f"‚ö†Ô∏è SMA Bot execution (expected with minimal data): {e}")
            
        return True
        
    except Exception as e:
        print(f"‚ùå Bot file loading error: {e}")
        return False

def test_bot_test_api():
    """Test bot test API n·∫øu c√≥"""
    print(f"\nüß™ Testing Bot Test API")
    
    # Test v·ªõi Bot ID 1 (SMA Bot)
    test_data = {
        "timeframe": "1h",
        "test_config": {
            "ma_short_period": 10,
            "ma_long_period": 20
        }
    }
    
    try:
        response = requests.post(
            f"{BASE_URL}/bots/1/test",
            json=test_data,
            headers={"Content-Type": "application/json"}
        )
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ Bot test successful: {result}")
        else:
            print(f"‚ö†Ô∏è Bot test API response: {response.status_code} - {response.text}")
            
    except Exception as e:
        print(f"‚ùå Bot test API error: {e}")

def test_subscription_with_bot():
    """Test subscription v·ªõi bot c√≥ file th·ª±c t·∫ø"""
    print(f"\nüîó Testing Subscription with Real Bot Files")
    
    # L·∫•y danh s√°ch registrations hi·ªán t·∫°i
    try:
        response = requests.get(
            f"{BASE_URL}/bots/registrations/rdmx6-jaaaa-aaaah-qcaiq-cai",
            headers={"X-API-Key": API_KEY}
        )
        
        if response.status_code == 200:
            registrations = response.json()
            print(f"‚úÖ Found {len(registrations)} active registrations")
            
            for reg in registrations:
                print(f"   - Registration {reg['id']}: {reg['instance_name']}")
                print(f"     Bot ID: {reg['bot_id']}, Status: {reg['status']}")
        else:
            print(f"‚ö†Ô∏è Could not get registrations: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå Subscription test error: {e}")

def show_system_architecture():
    """Hi·ªÉn th·ªã ki·∫øn tr√∫c h·ªá th·ªëng bot"""
    print(f"\nüèóÔ∏è BOT SYSTEM ARCHITECTURE")
    print("=" * 60)
    print("""
ÔøΩÔøΩ Project Structure:
‚îú‚îÄ‚îÄ bots/bot_sdk/
‚îÇ   ‚îú‚îÄ‚îÄ CustomBot.py      # Base class cho t·∫•t c·∫£ bots
‚îÇ   ‚îî‚îÄ‚îÄ Action.py         # Trading action model
‚îú‚îÄ‚îÄ bot_files/            # Bot implementations
‚îÇ   ‚îú‚îÄ‚îÄ advanced_ml_bot.py    # ML Trading Bot
‚îÇ   ‚îî‚îÄ‚îÄ simple_sma_bot.py     # SMA Trading Bot
‚îú‚îÄ‚îÄ services/
‚îÇ   ‚îî‚îÄ‚îÄ exchange_factory.py  # Exchange integrations
‚îî‚îÄ‚îÄ api/endpoints/
    ‚îî‚îÄ‚îÄ bots.py          # Bot management APIs

üîÑ Bot Execution Flow:
1. User registers bot via API ‚Üí Database subscription
2. System loads bot file from code_path
3. Bot extends CustomBot class
4. Bot implements execute_algorithm() method:
   ‚îú‚îÄ‚îÄ crawl_data()      # Get market data
   ‚îú‚îÄ‚îÄ preprocess_data() # Calculate indicators  
   ‚îú‚îÄ‚îÄ run_algorithm()   # Generate signals
   ‚îî‚îÄ‚îÄ make_prediction() # Return Action
5. System executes trading action

üõ†Ô∏è How to Create New Bot:
1. Extend CustomBot class
2. Implement execute_algorithm() method
3. Save file in bot_files/ directory
4. Update database code_path
5. Test via bot APIs

üìä Supported Bot Types:
- TECHNICAL: Technical analysis bots
- ML: Machine learning bots  
- DL: Deep learning bots
- LLM: Large language model bots
""")

def main():
    """Main test function"""
    print("üöÄ TESTING BOT SYSTEM WITH REAL FILES")
    print("=" * 60)
    
    # Show system architecture
    show_system_architecture()
    
    # Test bot APIs
    test_bot_api(1)  # SMA Bot
    test_bot_api(3)  # ML Bot
    
    # Test bot file loading
    test_bot_file_loading()
    
    # Test bot test API
    test_bot_test_api()
    
    # Test subscriptions
    test_subscription_with_bot()
    
    print(f"\n‚úÖ BOT SYSTEM TEST COMPLETED!")
    print("=" * 60)
    print("""
üéØ Next Steps:
1. Implement real exchange connections
2. Add more sophisticated ML models  
3. Create bot performance monitoring
4. Add backtesting capabilities
5. Implement risk management systems
""")

if __name__ == "__main__":
    main()
